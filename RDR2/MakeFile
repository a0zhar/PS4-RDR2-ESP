LIBPS4_DIR := libPS4

OBJCOPY := objcopy
ODIR := build
SDIR := source
IDIRS := -I$(LIBPS4_DIR)/include -I. -Iinclude
LDIRS := -L$(LIBPS4_DIR) -L. -Llib
MAPFILE := $(shell basename $(CURDIR)).map
CFLAGS := $(IDIRS) -O2 -std=c11 -ffunction-sections -fdata-sections -fno-builtin -nostartfiles -nostdlib -Wall -masm=intel -march=btver2 -mtune=btver2 -m64 -mabi=sysv -mcmodel=small -fpie
SFLAGS := -nostartfiles -nostdlib -march=btver2 -mtune=btver2
LFLAGS := $(LDIRS) -Xlinker -T $(LIBPS4_DIR)/linker.x -Wl,--build-id=none -Wl,--gc-sections
CFILES := $(wildcard $(SDIR)/*.c)
SFILES := $(wildcard $(SDIR)/*.s)
OBJS := $(patsubst $(SDIR)/%.c, $(ODIR)/%.o, $(CFILES)) $(patsubst $(SDIR)/%.s, $(ODIR)/%.o, $(SFILES))

LIBS := -lPS4

TARGET = rdr2menu.bin

$(TARGET): MakeRDR2Payload ReqClean $(ODIR) $(OBJS)
	@echo "Linking $(TARGET)..."
	@gcc $(LIBPS4_DIR)/crt0.s $(ODIR)/*.o -o temp.t $(CFLAGS) $(LFLAGS) $(LIBS)
	@echo "Creating binary $(TARGET)..."
	@$(OBJCOPY) -O binary temp.t $(TARGET)
	@rm -f temp.t
	@echo "$(TARGET) is ready!"

$(ODIR)/%.o: $(SDIR)/%.c
	@echo "Compiling $<..."
	@gcc -c -o $@ $< $(CFLAGS)

$(ODIR)/%.o: $(SDIR)/%.s
	@echo "Assembling $<..."
	@gcc -c -o $@ $< $(SFLAGS)

$(ODIR):
	@echo "Creating build directory: $(ODIR)..."
	@mkdir $@

.PHONY: $(TARGET) MakeRDR2Payload ReqClean

MakeRDR2Payload:
	@echo "Building RDR2 Payload..."
	@$(MAKE) -C rdrPayload $?

ReqClean:
	@echo "Cleaning up..."
	@rm -f $(TARGET) $(ODIR)/embed.o

clean:
	@echo "Full cleanup..."
	@rm -f $(TARGET) $(ODIR)/*.o
